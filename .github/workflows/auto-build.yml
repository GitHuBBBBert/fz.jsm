name: Auto Build FAP for All Firmwares and Channels

on:
  schedule:
    # Check for new firmware releases daily at 12:00 UTC
    - cron: '0 12 * * *'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no new firmware detected'
        required: false
        default: false
        type: boolean

jobs:
  check-firmware-updates:
    runs-on: ubuntu-latest
    outputs:
      official-release-latest: ${{ steps.check-official-release.outputs.latest }}
      official-dev-latest: ${{ steps.check-official-dev.outputs.latest }}
      momentum-release-latest: ${{ steps.check-momentum-release.outputs.latest }}
      momentum-dev-latest: ${{ steps.check-momentum-dev.outputs.latest }}
      unleashed-release-latest: ${{ steps.check-unleashed-release.outputs.latest }}
      unleashed-dev-latest: ${{ steps.check-unleashed-dev.outputs.latest }}
      official-release-changed: ${{ steps.check-official-release.outputs.changed }}
      official-dev-changed: ${{ steps.check-official-dev.outputs.changed }}
      momentum-release-changed: ${{ steps.check-momentum-release.outputs.changed }}
      momentum-dev-changed: ${{ steps.check-momentum-dev.outputs.changed }}
      unleashed-release-changed: ${{ steps.check-unleashed-release.outputs.changed }}
      unleashed-dev-changed: ${{ steps.check-unleashed-dev.outputs.changed }}
      should-build: ${{ steps.determine-build.outputs.should-build }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install ufbt
      run: |
        python -m pip install --upgrade pip
        pip install ufbt

    - name: Check Official Release Channel
      id: check-official-release
      run: |
        echo "Checking Official Release Channel..."
        ufbt update --channel=release || echo "ufbt update failed"
        
        echo "Getting ufbt status..."
        ufbt status || echo "ufbt status failed"
        
        LATEST=$(ufbt status | grep -E "Firmware origin:|Target:" | head -1 | sed 's/.*: *//' | cut -d' ' -f1 || echo "unknown")
        echo "Extracted version: $LATEST"
        echo "latest=$LATEST" >> $GITHUB_OUTPUT
        
        if [[ "$LATEST" == "unknown" ]] || [[ -z "$LATEST" ]]; then
          echo "Version is unknown or empty, marking as not changed"
          echo "changed=false" >> $GITHUB_OUTPUT
        elif curl -s https://api.github.com/repos/${{ github.repository }}/releases | jq -r '.[].tag_name' | grep -q "official-release-$LATEST"; then
          echo "Release already exists, marking as not changed"
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "New version detected, marking as changed"
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Check Official Dev Channel
      id: check-official-dev
      run: |
        echo "Checking Official Dev Channel..."
        ufbt update --channel=dev || echo "ufbt update failed"
        
        echo "Getting ufbt status..."
        ufbt status || echo "ufbt status failed"
        
        LATEST=$(ufbt status | grep -E "Firmware origin:|Target:" | head -1 | sed 's/.*: *//' | cut -d' ' -f1 || echo "unknown")
        echo "Extracted version: $LATEST"
        echo "latest=$LATEST" >> $GITHUB_OUTPUT
        
        if [[ "$LATEST" == "unknown" ]] || [[ -z "$LATEST" ]]; then
          echo "Version is unknown or empty, marking as not changed"
          echo "changed=false" >> $GITHUB_OUTPUT
        elif curl -s https://api.github.com/repos/${{ github.repository }}/releases | jq -r '.[].tag_name' | grep -q "official-dev-$LATEST"; then
          echo "Release already exists, marking as not changed"
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "New version detected, marking as changed"
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Check Momentum Release Channel
      id: check-momentum-release
      run: |
        echo "Checking Momentum Release Channel..."
        echo "Fetching releases from Next-Flip/Momentum-Firmware..."
        
        RESPONSE=$(curl -s https://api.github.com/repos/Next-Flip/Momentum-Firmware/releases)
        echo "API Response (first 500 chars): ${RESPONSE:0:500}"
        
        LATEST=$(echo "$RESPONSE" | jq -r '[.[] | select(.prerelease == false)][0].tag_name // "unknown"')
        echo "Extracted version: $LATEST"
        echo "latest=$LATEST" >> $GITHUB_OUTPUT
        
        if [[ "$LATEST" == "unknown" ]] || [[ "$LATEST" == "null" ]] || [[ -z "$LATEST" ]]; then
          echo "Version is unknown, null, or empty, marking as not changed"
          echo "changed=false" >> $GITHUB_OUTPUT
        elif curl -s https://api.github.com/repos/${{ github.repository }}/releases | jq -r '.[].tag_name' | grep -q "momentum-release-$LATEST"; then
          echo "Release already exists, marking as not changed"
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "New version detected, marking as changed"
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Check Momentum Dev Channel
      id: check-momentum-dev
      run: |
        echo "Checking Momentum Dev Channel..."
        echo "Fetching releases from Next-Flip/Momentum-Firmware..."
        
        RESPONSE=$(curl -s https://api.github.com/repos/Next-Flip/Momentum-Firmware/releases)
        echo "Looking for prerelease versions..."
        
        LATEST=$(echo "$RESPONSE" | jq -r '[.[] | select(.prerelease == true)][0].tag_name // "unknown"')
        echo "Extracted version: $LATEST"
        echo "latest=$LATEST" >> $GITHUB_OUTPUT
        
        if [[ "$LATEST" == "unknown" ]] || [[ "$LATEST" == "null" ]] || [[ -z "$LATEST" ]]; then
          echo "Version is unknown, null, or empty, marking as not changed"
          echo "changed=false" >> $GITHUB_OUTPUT
        elif curl -s https://api.github.com/repos/${{ github.repository }}/releases | jq -r '.[].tag_name' | grep -q "momentum-dev-$LATEST"; then
          echo "Release already exists, marking as not changed"
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "New version detected, marking as changed"
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Check Unleashed Release Channel
      id: check-unleashed-release
      run: |
        echo "Checking Unleashed Release Channel..."
        echo "Fetching releases from DarkFlippers/unleashed-firmware..."
        
        RESPONSE=$(curl -s https://api.github.com/repos/DarkFlippers/unleashed-firmware/releases)
        echo "API Response (first 500 chars): ${RESPONSE:0:500}"
        
        LATEST=$(echo "$RESPONSE" | jq -r '[.[] | select(.prerelease == false)][0].tag_name // "unknown"')
        echo "Extracted version: $LATEST"
        echo "latest=$LATEST" >> $GITHUB_OUTPUT
        
        if [[ "$LATEST" == "unknown" ]] || [[ "$LATEST" == "null" ]] || [[ -z "$LATEST" ]]; then
          echo "Version is unknown, null, or empty, marking as not changed"
          echo "changed=false" >> $GITHUB_OUTPUT
        elif curl -s https://api.github.com/repos/${{ github.repository }}/releases | jq -r '.[].tag_name' | grep -q "unleashed-release-$LATEST"; then
          echo "Release already exists, marking as not changed"
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "New version detected, marking as changed"
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Check Unleashed Dev Channel
      id: check-unleashed-dev
      run: |
        echo "Checking Unleashed Dev Channel..."
        echo "Fetching releases from DarkFlippers/unleashed-firmware..."
        
        RESPONSE=$(curl -s https://api.github.com/repos/DarkFlippers/unleashed-firmware/releases)
        echo "Looking for prerelease versions..."
        
        LATEST=$(echo "$RESPONSE" | jq -r '[.[] | select(.prerelease == true)][0].tag_name // "unknown"')
        echo "Extracted version: $LATEST"
        echo "latest=$LATEST" >> $GITHUB_OUTPUT
        
        if [[ "$LATEST" == "unknown" ]] || [[ "$LATEST" == "null" ]] || [[ -z "$LATEST" ]]; then
          echo "Version is unknown, null, or empty, marking as not changed"
          echo "changed=false" >> $GITHUB_OUTPUT
        elif curl -s https://api.github.com/repos/${{ github.repository }}/releases | jq -r '.[].tag_name' | grep -q "unleashed-dev-$LATEST"; then
          echo "Release already exists, marking as not changed"
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "New version detected, marking as changed"
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Determine if build is needed
      id: determine-build
      run: |
        echo "Force build: ${{ github.event.inputs.force_build }}"
        echo "Official Release changed: ${{ steps.check-official-release.outputs.changed }}"
        echo "Official Dev changed: ${{ steps.check-official-dev.outputs.changed }}"
        echo "Momentum Release changed: ${{ steps.check-momentum-release.outputs.changed }}"
        echo "Momentum Dev changed: ${{ steps.check-momentum-dev.outputs.changed }}"
        echo "Unleashed Release changed: ${{ steps.check-unleashed-release.outputs.changed }}"
        echo "Unleashed Dev changed: ${{ steps.check-unleashed-dev.outputs.changed }}"
        
        if [[ "${{ github.event.inputs.force_build }}" == "true" ]] || \
           [[ "${{ steps.check-official-release.outputs.changed }}" == "true" ]] || \
           [[ "${{ steps.check-official-dev.outputs.changed }}" == "true" ]] || \
           [[ "${{ steps.check-momentum-release.outputs.changed }}" == "true" ]] || \
           [[ "${{ steps.check-momentum-dev.outputs.changed }}" == "true" ]] || \
           [[ "${{ steps.check-unleashed-release.outputs.changed }}" == "true" ]] || \
           [[ "${{ steps.check-unleashed-dev.outputs.changed }}" == "true" ]]; then
          echo "Build is needed"
          echo "should-build=true" >> $GITHUB_OUTPUT
        else
          echo "No build needed"
          echo "should-build=false" >> $GITHUB_OUTPUT
        fi

  build:
    needs: check-firmware-updates
    if: needs.check-firmware-updates.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # This is crucial - prevents matrix from canceling other jobs
      matrix:
        include:
          # Official Firmware
          - firmware: official
            channel: release
            ufbt_channel: release
            version: ${{ needs.check-firmware-updates.outputs.official-release-latest }}
            changed: ${{ needs.check-firmware-updates.outputs.official-release-changed }}
          - firmware: official
            channel: dev
            ufbt_channel: dev
            version: ${{ needs.check-firmware-updates.outputs.official-dev-latest }}
            changed: ${{ needs.check-firmware-updates.outputs.official-dev-changed }}
          # Momentum Firmware
          - firmware: momentum  
            channel: release
            ufbt_channel: release
            version: ${{ needs.check-firmware-updates.outputs.momentum-release-latest }}
            changed: ${{ needs.check-firmware-updates.outputs.momentum-release-changed }}
          - firmware: momentum
            channel: dev
            ufbt_channel: dev
            version: ${{ needs.check-firmware-updates.outputs.momentum-dev-latest }}
            changed: ${{ needs.check-firmware-updates.outputs.momentum-dev-changed }}
          # Unleashed Firmware  
          - firmware: unleashed
            channel: release
            ufbt_channel: release
            version: ${{ needs.check-firmware-updates.outputs.unleashed-release-latest }}
            changed: ${{ needs.check-firmware-updates.outputs.unleashed-release-changed }}
          - firmware: unleashed
            channel: dev
            ufbt_channel: dev
            version: ${{ needs.check-firmware-updates.outputs.unleashed-dev-latest }}
            changed: ${{ needs.check-firmware-updates.outputs.unleashed-dev-changed }}

    steps:
    - name: Debug matrix values
      run: |
        echo "=== Matrix Values Debug ==="
        echo "Firmware: ${{ matrix.firmware }}"
        echo "Channel: ${{ matrix.channel }}"
        echo "Version: ${{ matrix.version }}"
        echo "Changed: ${{ matrix.changed }}"
        echo "Force Build: ${{ github.event.inputs.force_build }}"
        echo "=========================="

    - name: Check if build is needed
      id: check-build
      run: |
        echo "Checking if build is needed..."
        if [[ "${{ matrix.changed }}" == "false" ]] && [[ "${{ github.event.inputs.force_build }}" != "true" ]]; then
          echo "No changes detected and not a forced build"
          echo "skip=true" >> $GITHUB_OUTPUT
          echo "skip_reason=no_changes" >> $GITHUB_OUTPUT
        elif [[ "${{ matrix.version }}" == "null" ]] || [[ "${{ matrix.version }}" == "unknown" ]] || [[ -z "${{ matrix.version }}" ]]; then
          echo "Invalid version: ${{ matrix.version }}"
          echo "skip=true" >> $GITHUB_OUTPUT
          echo "skip_reason=invalid_version" >> $GITHUB_OUTPUT
        else
          echo "Build is needed"
          echo "skip=false" >> $GITHUB_OUTPUT
          echo "skip_reason=none" >> $GITHUB_OUTPUT
        fi

    - name: Skip if no changes or invalid version
      if: steps.check-build.outputs.skip == 'true'
      run: |
        echo "Skipping ${{ matrix.firmware }} ${{ matrix.channel }}"
        echo "Reason: ${{ steps.check-build.outputs.skip_reason }}"
        echo "Version: ${{ matrix.version }}"
        exit 0

    - name: Checkout code
      if: steps.check-build.outputs.skip != 'true'
      uses: actions/checkout@v4

    - name: Set up Python
      if: steps.check-build.outputs.skip != 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install ufbt
      if: steps.check-build.outputs.skip != 'true'
      run: |
        python -m pip install --upgrade pip
        pip install ufbt

    - name: Setup ufbt for Official firmware
      if: matrix.firmware == 'official' && steps.check-build.outputs.skip != 'true'
      run: |
        echo "Setting up ufbt for Official firmware..."
        ufbt update --channel=${{ matrix.ufbt_channel }}
        echo "ufbt status:"
        ufbt status

    - name: Setup ufbt for Momentum firmware
      if: matrix.firmware == 'momentum' && steps.check-build.outputs.skip != 'true'
      run: |
        echo "Setting up ufbt for Momentum firmware..."
        ufbt update --channel=${{ matrix.ufbt_channel }} --index-url=https://up.momentum-fw.dev/directory.json
        echo "ufbt status:"
        ufbt status

    - name: Setup ufbt for Unleashed firmware
      if: matrix.firmware == 'unleashed' && steps.check-build.outputs.skip != 'true'
      run: |
        echo "Setting up ufbt for Unleashed firmware..."
        ufbt update --channel=${{ matrix.ufbt_channel }} --index-url=https://up.unleashedflip.com/directory.json
        echo "ufbt status:"
        ufbt status

    # Rest of the build steps remain the same...
